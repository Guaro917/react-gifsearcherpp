{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAERC,mBAAS,IAFD,mBAErCC,EAFqC,KAEzBC,EAFyB,KAkB5C,OACI,mCACA,sBAAMC,SAXW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAMd,SACK,uBACDO,KAAK,OACLC,MAAST,EACTU,SApBkB,SAACP,GAEvBF,EAAcE,EAAEQ,OAAOF,e,+BCRlBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEmCC,UAAUH,GAF7C,+DAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAGDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAZtB,kBAgBZM,GAhBY,4CAAH,sDCCPO,EAAc,SAAC,GAAkB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAIhC,OACI,sBAAKc,UAAU,wCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAAc,ECAX,SAACA,GAAc,IAAD,EAEZd,mBAAS,CAC/BqB,KAAM,GACNa,SAAS,IAJyB,mBAE/BC,EAF+B,KAExBC,EAFwB,KAmBtC,OAZAC,qBAAU,WAENxB,EAAQC,GACPwB,MAAK,SAAAC,GACFH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAInB,CAACpB,IAEIqB,EDhBuBK,CAAa1B,GAA/Ba,EAHuB,EAG5BN,KAAaa,EAHe,EAGfA,QAepB,OACI,qCACI,6BAAKpB,IAEJoB,EAAU,wCAAiB,KAG5B,qBAAKJ,UAAU,YAAf,SAEYH,EAAOJ,KAAI,SAAAC,GAEP,OAAO,cAAC,EAAD,eAEHA,GADEA,EAAIC,aEhCzBgB,EAAe,WAAM,MAIMzC,mBAAS,CAAC,iBAJhB,mBAIvBQ,EAJuB,KAIXT,EAJW,KAa9B,OACI,qCACI,8CACA,cAAC,EAAD,CAAaA,cAAiBA,IAC9B,uBAGA,6BAEIS,EAAWe,KAAI,SAAAT,GACX,OAAO,cAAC,EAAD,CAEPA,SAAYA,GADLA,Y,MCvB3B4B,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.a55e26e1.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ({setCategories}) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = (e) => {\r\n//        console.log(e.target.value); //esto nos sirve para modificar el texto del input\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault(); //preventDefault es para que la pagina no haga refresh cuando apretamos el enter, sino se actualiza al valor por defecto\r\n        //el input en este caso hola mundo, y no es lo que quermos\r\n        if(inputValue.trim().length > 0){ //la palabra debe tener al menos 1 letra, asi no puedo mandar categoria vacia, trim() corta los espacios adelante y atras como caracteres \r\n        setCategories(categories => [inputValue, ...categories]) \r\n        setInputValue('');\r\n        }\r\n    }\r\n    \r\n    return (\r\n        <>\r\n        <form onSubmit= {handleSubmit}>\r\n             <input \r\n            type='text' // tipo de datos en el input\r\n            value = {inputValue} //texto por defecto en el input\r\n            onChange = {handleInputChange} //onChange nos permite que cambie el input.\r\n          /> \r\n        </form>        \r\n\r\n        </>//puedo quitar este fragment porque solo el formulario contendra a todos los inputs\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n} //addcategory de tipo func es requerido, es obligatorio.","\r\nexport const getGifs = async(category) => {\r\n   \r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=10&api_key=2GDXLUDMAV9eSyAjrxViqDTfWvcQWXWD`;\r\n    //arriba usamos los backticks para poder usar el ${}(interpolacion de strings) el encodeURI es por si la categoria tiene espacios, o caracteres raros.\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n\r\n\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    // console.log(title,url);\r\n\r\n    return (\r\n        <div className=\"card animate__animated animate__flash\">\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\n\r\nexport const GifGrid = ({category}) => {\r\n\r\n    // const [images, setImages] = useState([]); esto tmb se paso al usefetchgifs de otra manera y por eso queda comentado, no lo uso aqui.\r\n    const {data:images, loading}= useFetchGifs(category);\r\n\r\n    // useEffect(() => {\r\n    //     getGifs(category)\r\n    //     .then(imgs => setImages(imgs)); // recordar aca puedo poner then(setImages); y es lo mismo porq la funcion solo toma un primer y unico argument\r\n    //     }, [category])\r\n        // en este caso la instruccion dentro que es getGifs se ejecuta unicamente cuando renderizamos por primera vez el componente\r\n    // el segundo elemento que toma useEffect es una lista de dependencias si alguna esta presente el getGifs se ejecutaria otra vez, no es este el caso\r\n    //por todo esto usamos useEffect en vez de dejarlo simplemente con el useState porque de ser asi, cada vez que modifiquemos algo\r\n    //al volverse a renderizar volveria a ejecutar la instruccion getGifs(recordar q la eliminamos de la linea 33 justo antes del return)\r\n    //esto se paso al useFetchGifs\r\n\r\n\r\n//RECORDAR agregas a la <li></li> las imagenes\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {loading ? <p>Loading</p> : null} \r\n            {/* esto tambien se puede hacer ocmo loading && <p>loading</p> porque evaluara el loading inicial, y solo si es true nos mostrara el parrafo, si es false no, por el operador AND */}\r\n\r\n            <div className=\"card-grid\">\r\n                    {\r\n                        images.map(img => { //renombramos la data en la desestructurazion con data: images\r\n                            //return <li key = {img.id}>{img.title}</li> \r\n                            return <GifGridItem \r\n                            key={ img.id } \r\n                            {...img} // usamos el operador spread y eso nos permite desestructurar en GifGridItem haciendo {title,url}\r\n                            //podria poner img={img} y sencillamente llamar a los props en el componente GifGridItem\r\n                            />\r\n                        })\r\n                    }\r\n\r\n            </div>\r\n        </>//pongo este fragment porque sino sin el el return devolveria el h3 y el div, eso nos va a dar un error, por ello encerammos todo en el fragment obviamente.\r\n    )\r\n}\r\n","import { useEffect, useState } from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\n//Custom hook, funcionan como funcional componenents, pueden tener efectos, usar reducer, etc. \r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n        .then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false\r\n            });\r\n        })\r\n\r\n    },[category])\r\n\r\n    return state;\r\n}","import React, {useState} from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid'\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    // const categories = ['One Punch', 'Samurai X', 'Dragon Ball']\r\n\r\n    const [categories, setCategories] = useState(['Rick & Morty'])//recordemos esto es el hook del useState\r\n//el primer argumento es categories, luego el segundo argumento es la funcion que usamos para aÃ±adir categorias, y luego lo que esta despues\r\n//del igual es el estado inicial de categories en este caso\r\n\r\n//TAREA\r\n    // const handleAdd = () => {\r\n    //     setCategories([...categories, 'HunterXHunter']); // usamos el operador spread para agregarlo, hay otras maneras\r\n    // }\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories = {setCategories} />\r\n            <hr />  \r\n\r\n\r\n            <ol>\r\n                {\r\n                categories.map(category => {\r\n                    return <GifGrid \r\n                    key = {category} \r\n                    category = {category}\r\n                    />\r\n                })\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n\n// GifExpertApp\n"],"sourceRoot":""}